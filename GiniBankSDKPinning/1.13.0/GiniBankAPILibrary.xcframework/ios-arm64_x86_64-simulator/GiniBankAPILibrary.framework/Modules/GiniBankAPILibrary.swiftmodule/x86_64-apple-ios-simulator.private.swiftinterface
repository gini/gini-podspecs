// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GiniBankAPILibrary
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import os
public enum APIDomain {
  case `default`
  case gym(tokenSource: GiniBankAPILibrary.AlternativeTokenSource)
  case custom(domain: Swift.String, tokenSource: GiniBankAPILibrary.AlternativeTokenSource?)
}
public struct CompositeDocument {
  public let document: Foundation.URL
  public var id: Swift.String? {
    get
  }
}
extension GiniBankAPILibrary.CompositeDocument : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct CompositeDocumentInfo {
  public let partialDocuments: [GiniBankAPILibrary.PartialDocumentInfo]
  public init(partialDocuments: [GiniBankAPILibrary.PartialDocumentInfo])
}
extension GiniBankAPILibrary.CompositeDocumentInfo : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol AlternativeTokenSource {
  func fetchToken(completion: @escaping (Swift.Result<GiniBankAPILibrary.Token, GiniBankAPILibrary.GiniError>) -> Swift.Void)
}
final public class Token {
  final public var accessToken: Swift.String
  public init(expiration: Foundation.Date, scope: Swift.String?, type: Swift.String?, accessToken: Swift.String)
  @objc deinit
}
extension GiniBankAPILibrary.Token : Swift.Decodable {
  convenience public init(from decoder: Swift.Decoder) throws
}
public enum UserDomain {
  case `default`
  case custom(domain: Swift.String)
}
public struct Client {
  public var domain: Swift.String
  public var id: Swift.String
  public var secret: Swift.String
  public init(id: Swift.String, secret: Swift.String, domain: Swift.String)
}
@_hasMissingDesignatedInitializers final public class GiniBankAPI {
  final public func documentService<T>() -> T where T : GiniBankAPILibrary.DocumentService
  final public func paymentService() -> GiniBankAPILibrary.PaymentService
  final public func removeStoredCredentials() throws
  @objc deinit
}
extension GiniBankAPILibrary.GiniBankAPI {
  public struct Builder {
    public var sessionDelegate: Foundation.URLSessionDelegate?
    public init(client: GiniBankAPILibrary.Client, api: GiniBankAPILibrary.APIDomain = .default, userApi: GiniBankAPILibrary.UserDomain = .default, logLevel: GiniBankAPILibrary.LogLevel = .none, sessionDelegate: Foundation.URLSessionDelegate? = nil)
    public init(customApiDomain: Swift.String, alternativeTokenSource: GiniBankAPILibrary.AlternativeTokenSource, logLevel: GiniBankAPILibrary.LogLevel = .none, sessionDelegate: Foundation.URLSessionDelegate? = nil)
    public func build() -> GiniBankAPILibrary.GiniBankAPI
  }
}
public protocol GiniErrorProtocol {
  var message: Swift.String { get }
  var response: Foundation.HTTPURLResponse? { get }
  var data: Foundation.Data? { get }
}
public enum GiniError : Swift.Error, GiniBankAPILibrary.GiniErrorProtocol, Swift.Equatable {
  case badRequest(response: Foundation.HTTPURLResponse? = nil, data: Foundation.Data? = nil)
  case invalidCredentials
  case keychainError
  case notAcceptable(response: Foundation.HTTPURLResponse? = nil, data: Foundation.Data? = nil)
  case notFound(response: Foundation.HTTPURLResponse? = nil, data: Foundation.Data? = nil)
  case noResponse
  case parseError(message: Swift.String, response: Foundation.HTTPURLResponse? = nil, data: Foundation.Data? = nil)
  case requestCancelled
  case tooManyRequests(response: Foundation.HTTPURLResponse? = nil, data: Foundation.Data? = nil)
  case unauthorized(response: Foundation.HTTPURLResponse? = nil, data: Foundation.Data? = nil)
  case unknown(response: Foundation.HTTPURLResponse? = nil, data: Foundation.Data? = nil)
  public var message: Swift.String {
    get
  }
  public var response: Foundation.HTTPURLResponse? {
    get
  }
  public var data: Foundation.Data? {
    get
  }
  public static func == (a: GiniBankAPILibrary.GiniError, b: GiniBankAPILibrary.GiniError) -> Swift.Bool
}
public enum LogLevel {
  case none
  case debug
  public static func == (a: GiniBankAPILibrary.LogLevel, b: GiniBankAPILibrary.LogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias CompletionResult<T> = (Swift.Result<T, GiniBankAPILibrary.GiniError>) -> Swift.Void
final public class CancellationToken {
  final public var isCancelled: Swift.Bool
  public init()
  final public func cancel()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DefaultDocumentService {
  final public var apiDomain: GiniBankAPILibrary.APIDomain
  final public func createDocument(fileName: Swift.String?, docType: GiniBankAPILibrary.Document.DocType?, type: GiniBankAPILibrary.Document.TypeV2, metadata: GiniBankAPILibrary.Document.Metadata?, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.Document>)
  final public func delete(_ document: GiniBankAPILibrary.Document, completion: @escaping GiniBankAPILibrary.CompletionResult<Swift.String>)
  final public func documents(limit: Swift.Int?, offset: Swift.Int?, completion: @escaping GiniBankAPILibrary.CompletionResult<[GiniBankAPILibrary.Document]>)
  final public func fetchDocument(with id: Swift.String, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.Document>)
  final public func extractions(for document: GiniBankAPILibrary.Document, cancellationToken: GiniBankAPILibrary.CancellationToken, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.ExtractionResult>)
  final public func layout(for document: GiniBankAPILibrary.Document, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.Document.Layout>)
  final public func pages(in document: GiniBankAPILibrary.Document, completion: @escaping GiniBankAPILibrary.CompletionResult<[GiniBankAPILibrary.Document.Page]>)
  final public func pagePreview(for document: GiniBankAPILibrary.Document, pageNumber: Swift.Int, size: GiniBankAPILibrary.Document.Page.Size, completion: @escaping GiniBankAPILibrary.CompletionResult<Foundation.Data>)
  final public func submitFeedback(for document: GiniBankAPILibrary.Document, with extractions: [GiniBankAPILibrary.Extraction], completion: @escaping GiniBankAPILibrary.CompletionResult<Swift.Void>)
  final public func submitFeedback(for document: GiniBankAPILibrary.Document, with extractions: [GiniBankAPILibrary.Extraction], and compoundExtractions: [Swift.String : [[GiniBankAPILibrary.Extraction]]], completion: @escaping GiniBankAPILibrary.CompletionResult<Swift.Void>)
  final public func preview(for documentId: Swift.String, pageNumber: Swift.Int, completion: @escaping GiniBankAPILibrary.CompletionResult<Foundation.Data>)
  final public func log(errorEvent: GiniBankAPILibrary.ErrorEvent, completion: @escaping GiniBankAPILibrary.CompletionResult<Swift.Void>)
  @objc deinit
}
extension GiniBankAPILibrary.Document.Layout {
  public struct Page : Swift.Decodable {
    public let number: Swift.Int
    public let sizeX: Swift.Double
    public let sizeY: Swift.Double
    public let textZones: [GiniBankAPILibrary.Document.Layout.TextZone]
    public let regions: [GiniBankAPILibrary.Document.Layout.Region]?
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Region : Swift.Decodable {
    public let l: Swift.Double
    public let t: Swift.Double
    public let w: Swift.Double
    public let h: Swift.Double
    public let type: Swift.String?
    public let lines: [GiniBankAPILibrary.Document.Layout.Region]?
    public let wds: [GiniBankAPILibrary.Document.Layout.Word]?
    public init(from decoder: Swift.Decoder) throws
  }
  public struct TextZone : Swift.Decodable {
    public let paragraphs: [GiniBankAPILibrary.Document.Layout.Region]
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Word : Swift.Decodable {
    public let l: Swift.Double
    public let t: Swift.Double
    public let w: Swift.Double
    public let h: Swift.Double
    public let fontSize: Swift.Double
    public let fontFamily: Swift.String
    public let bold: Swift.Bool
    public let text: Swift.String
    public init(from decoder: Swift.Decoder) throws
  }
}
extension GiniBankAPILibrary.Document.Page : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct Document {
  public let compositeDocuments: [GiniBankAPILibrary.CompositeDocument]?
  public let creationDate: Foundation.Date
  public let id: Swift.String
  public let name: Swift.String
  public let origin: GiniBankAPILibrary.Document.Origin
  public let pageCount: Swift.Int
  public let pages: [GiniBankAPILibrary.Document.Page]?
  public let links: GiniBankAPILibrary.Document.Links
  public let partialDocuments: [GiniBankAPILibrary.PartialDocumentInfo]?
  public let progress: GiniBankAPILibrary.Document.Progress
  public let sourceClassification: GiniBankAPILibrary.Document.SourceClassification
  public init(creationDate: Foundation.Date, id: Swift.String, name: Swift.String, links: GiniBankAPILibrary.Document.Links, sourceClassification: GiniBankAPILibrary.Document.SourceClassification)
}
extension GiniBankAPILibrary.Document {
  public enum Progress : Swift.String, Swift.Decodable {
    case completed
    case pending
    case error
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Origin : Swift.String, Swift.Decodable {
    case upload
    case unknown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum SourceClassification : Swift.String, Swift.Decodable {
    case composite
    case native
    case scanned
    case sandwich
    case text
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DocType : Swift.String, Swift.Codable {
    case bankStatement
    case contract
    case invoice
    case receipt
    case reminder
    case remittanceSlip
    case travelExpenseReport
    case other
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct Links {
    public let extractions: Foundation.URL
    public let layout: Foundation.URL
    public let processed: Foundation.URL
    public let document: Foundation.URL
    public let pages: Foundation.URL?
    public init(giniAPIDocumentURL: Foundation.URL)
  }
  public struct Layout {
    public let pages: [GiniBankAPILibrary.Document.Layout.Page]
  }
  public struct Page {
    public let number: Swift.Int
    public let images: [(size: GiniBankAPILibrary.Document.Page.Size, url: Foundation.URL)]
    public enum Size : Swift.String, Swift.Decodable {
      case small
      case big
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
  }
  public enum TypeV2 {
    case partial(Foundation.Data)
    case composite(GiniBankAPILibrary.CompositeDocumentInfo)
  }
  public struct Metadata {
    public init(branchId: Swift.String? = nil, additionalHeaders: [Swift.String : Swift.String]? = nil)
  }
}
extension GiniBankAPILibrary.Document : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension GiniBankAPILibrary.Document.Links : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension GiniBankAPILibrary.Document.Layout : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public protocol DocumentService : AnyObject {
  var apiDomain: GiniBankAPILibrary.APIDomain { get }
  func delete(_ document: GiniBankAPILibrary.Document, completion: @escaping GiniBankAPILibrary.CompletionResult<Swift.String>)
  func documents(limit: Swift.Int?, offset: Swift.Int?, completion: @escaping GiniBankAPILibrary.CompletionResult<[GiniBankAPILibrary.Document]>)
  func extractions(for document: GiniBankAPILibrary.Document, cancellationToken: GiniBankAPILibrary.CancellationToken, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.ExtractionResult>)
  func fetchDocument(with id: Swift.String, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.Document>)
  func layout(for document: GiniBankAPILibrary.Document, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.Document.Layout>)
  func pages(in document: GiniBankAPILibrary.Document, completion: @escaping GiniBankAPILibrary.CompletionResult<[GiniBankAPILibrary.Document.Page]>)
  func pagePreview(for document: GiniBankAPILibrary.Document, pageNumber: Swift.Int, size: GiniBankAPILibrary.Document.Page.Size, completion: @escaping GiniBankAPILibrary.CompletionResult<Foundation.Data>)
  func submitFeedback(for document: GiniBankAPILibrary.Document, with extractions: [GiniBankAPILibrary.Extraction], completion: @escaping GiniBankAPILibrary.CompletionResult<Swift.Void>)
  func log(errorEvent: GiniBankAPILibrary.ErrorEvent, completion: @escaping GiniBankAPILibrary.CompletionResult<Swift.Void>)
}
public struct ErrorEvent : Swift.Codable, Swift.Equatable {
  public init(deviceModel: Swift.String, osName: Swift.String, osVersion: Swift.String, captureSdkVersion: Swift.String, apiLibVersion: Swift.String, description: Swift.String, documentId: Swift.String?, originalRequestId: Swift.String?)
  public static func == (a: GiniBankAPILibrary.ErrorEvent, b: GiniBankAPILibrary.ErrorEvent) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers final public class Extraction : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let box: GiniBankAPILibrary.Extraction.Box?
  @objc final public let candidates: Swift.String?
  @objc final public let entity: Swift.String
  @objc final public var value: Swift.String
  @objc final public var name: Swift.String?
  @objc @objcMembers final public class Box : ObjectiveC.NSObject, Swift.Decodable {
    @objc final public let height: Swift.Double
    @objc final public let left: Swift.Double
    @objc final public let page: Swift.Int
    @objc final public let top: Swift.Double
    @objc final public let width: Swift.Double
    @objc public init(height: Swift.Double, left: Swift.Double, page: Swift.Int, top: Swift.Double, width: Swift.Double)
    @objc deinit
    public init(from decoder: Swift.Decoder) throws
  }
  @objc @objcMembers final public class Candidate : ObjectiveC.NSObject, Swift.Decodable {
    @objc final public let box: GiniBankAPILibrary.Extraction.Box?
    @objc final public let entity: Swift.String
    @objc final public let value: Swift.String
    @objc public init(box: GiniBankAPILibrary.Extraction.Box?, entity: Swift.String, value: Swift.String)
    @objc deinit
    public init(from decoder: Swift.Decoder) throws
  }
  @objc public init(box: GiniBankAPILibrary.Extraction.Box?, candidates: Swift.String?, entity: Swift.String, value: Swift.String, name: Swift.String?)
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
}
extension GiniBankAPILibrary.Extraction {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension GiniBankAPILibrary.Extraction {
  @objc override final public var debugDescription: Swift.String {
    @objc get
  }
}
extension GiniBankAPILibrary.Extraction.Box {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension GiniBankAPILibrary.Extraction.Candidate {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
@objc @objcMembers final public class ExtractionResult : ObjectiveC.NSObject {
  @objc final public let extractions: [GiniBankAPILibrary.Extraction]
  @objc final public var lineItems: [[GiniBankAPILibrary.Extraction]]?
  @objc final public var returnReasons: [GiniBankAPILibrary.ReturnReason]?
  @objc final public let candidates: [Swift.String : [GiniBankAPILibrary.Extraction.Candidate]]
  @objc public init(extractions: [GiniBankAPILibrary.Extraction], lineItems: [[GiniBankAPILibrary.Extraction]]?, returnReasons: [GiniBankAPILibrary.ReturnReason]?, candidates: [Swift.String : [GiniBankAPILibrary.Extraction.Candidate]])
  @objc deinit
}
public struct PartialDocumentInfo {
  public var document: Foundation.URL?
  public var rotationDelta: Swift.Int
  public var id: Swift.String? {
    get
  }
  public init(document: Foundation.URL?, rotationDelta: Swift.Int = 0)
}
extension GiniBankAPILibrary.PartialDocumentInfo : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Payment {
  public var paidAt: Swift.String, recipient: Swift.String, iban: Swift.String
  public var bic: Swift.String?
  public var amount: Swift.String, purpose: Swift.String
}
public struct PaymentLinks : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension GiniBankAPILibrary.Payment : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct PaymentRequest : Swift.Codable {
  public var requesterURI: Swift.String?
  public var iban: Swift.String
  public var bic: Swift.String?
  public var amount: Swift.String, purpose: Swift.String, recipient: Swift.String, createdAt: Swift.String
  public var status: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Links : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias PaymentRequests = [GiniBankAPILibrary.PaymentRequest]
@_hasMissingDesignatedInitializers final public class PaymentService : GiniBankAPILibrary.PaymentServiceProtocol {
  final public func paymentRequest(id: Swift.String, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.PaymentRequest>)
  final public func paymentRequests(limit: Swift.Int? = 20, offset: Swift.Int? = 0, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.PaymentRequests>)
  final public func resolvePaymentRequest(id: Swift.String, recipient: Swift.String, iban: Swift.String, bic: Swift.String? = nil, amount: Swift.String, purpose: Swift.String, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.ResolvedPaymentRequest>)
  final public func payment(id: Swift.String, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.Payment>)
  final public var apiDomain: GiniBankAPILibrary.APIDomain
  @objc deinit
}
public protocol PaymentServiceProtocol : AnyObject {
  func paymentRequest(id: Swift.String, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.PaymentRequest>)
  func paymentRequests(limit: Swift.Int?, offset: Swift.Int?, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.PaymentRequests>)
  func resolvePaymentRequest(id: Swift.String, recipient: Swift.String, iban: Swift.String, bic: Swift.String?, amount: Swift.String, purpose: Swift.String, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.ResolvedPaymentRequest>)
  func payment(id: Swift.String, completion: @escaping GiniBankAPILibrary.CompletionResult<GiniBankAPILibrary.Payment>)
}
public struct ResolvedPaymentRequest : Swift.Codable {
  public var requesterUri: Swift.String
  public var iban: Swift.String
  public var bic: Swift.String?
  public var amount: Swift.String, purpose: Swift.String, recipient: Swift.String, createdAt: Swift.String
  public var status: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers final public class ReturnReason : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let localizedLabels: [Swift.String : Swift.String]
  @objc public init(id: Swift.String, localizedLabels: [Swift.String : Swift.String])
  @objc deinit
}
extension GiniBankAPILibrary.ReturnReason : Swift.Decodable {
  convenience public init(from decoder: Swift.Decoder) throws
}
extension GiniBankAPILibrary.ReturnReason {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension GiniBankAPILibrary.ReturnReason {
  @objc override final public var debugDescription: Swift.String {
    @objc get
  }
}
public let GiniBankAPILibraryVersion: Swift.String
extension GiniBankAPILibrary.LogLevel : Swift.Equatable {}
extension GiniBankAPILibrary.LogLevel : Swift.Hashable {}
extension GiniBankAPILibrary.DefaultDocumentService : GiniBankAPILibrary.DocumentService {}
extension GiniBankAPILibrary.Document.Progress : Swift.Equatable {}
extension GiniBankAPILibrary.Document.Progress : Swift.Hashable {}
extension GiniBankAPILibrary.Document.Progress : Swift.RawRepresentable {}
extension GiniBankAPILibrary.Document.Origin : Swift.Equatable {}
extension GiniBankAPILibrary.Document.Origin : Swift.Hashable {}
extension GiniBankAPILibrary.Document.Origin : Swift.RawRepresentable {}
extension GiniBankAPILibrary.Document.SourceClassification : Swift.Equatable {}
extension GiniBankAPILibrary.Document.SourceClassification : Swift.Hashable {}
extension GiniBankAPILibrary.Document.SourceClassification : Swift.RawRepresentable {}
extension GiniBankAPILibrary.Document.DocType : Swift.Equatable {}
extension GiniBankAPILibrary.Document.DocType : Swift.Hashable {}
extension GiniBankAPILibrary.Document.DocType : Swift.RawRepresentable {}
extension GiniBankAPILibrary.Document.Page.Size : Swift.Equatable {}
extension GiniBankAPILibrary.Document.Page.Size : Swift.Hashable {}
extension GiniBankAPILibrary.Document.Page.Size : Swift.RawRepresentable {}
